var searchIndex = {};
searchIndex['portmidi'] = {"items":[[0,"","portmidi",""],[1,"DeviceInfo","","Represents what we know about a device"],[11,"name","","",0],[11,"input","","",0],[11,"output","","",0],[1,"MidiMessage","","Represents a single midi message, see also `MidiEvent`"],[11,"status","","",1],[11,"data1","","",1],[11,"data2","","",1],[1,"MidiEvent","","Represents a time stamped midi event. See also `MidiMessage`"],[11,"message","","",2],[11,"timestamp","","",2],[1,"InputPort","","Representation of an input midi port."],[1,"OutputPort","","Representation of an output midi port."],[2,"PortMidiError","",""],[12,"HostError","","",3],[12,"InvalidDeviceId","","",3],[12,"InsufficientMemory","","",3],[12,"BufferTooSmall","","",3],[12,"BufferOverflow","","",3],[12,"BadPtr","","",3],[12,"BadData","","",3],[12,"InternalError","","",3],[12,"BufferMaxSize","","",3],[3,"initialize","","`initialize` initalizes the underlying PortMidi C library, call this\nbefore using the library."],[3,"terminate","","`terminate` terminates the underlying PortMidi C library, call this\nafter using the library."],[3,"count_devices","","Return the number of devices"],[3,"get_default_input_device_id","","Gets the `PortMidiDeviceId` for the default input, or `None` if\nthere isn't one"],[3,"get_default_output_device_id","","Gets the `PortMidiDeviceId` for the default output, or `None` if\nthere isn't one"],[3,"get_device_info","","Returns a `DeviceInfo` with information about a device, or `None` if\nit does not exist"],[3,"get_error_text","","Translate portmidi error number into human readable message.\n*    These strings are constants (set at compile time) so client has\n*    no need to allocate storage"],[3,"get_host_error_text","","Translate portmidi host error into human readable message.\nThese strings are computed at run time, so client has to allocate storage.\nAfter this routine executes, the host error is cleared."],[4,"PortMidiDeviceId","",""],[4,"PortMidiResult","",""],[18,"HDRLENGTH","",""],[18,"PM_HOST_ERROR_MSG_LEN","",""],[10,"eq","","",3],[10,"ne","","",3],[10,"fmt","","",3],[10,"fmt","","",0],[10,"clone","","",0],[10,"fmt","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"fmt","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"clone","","",2],[10,"new","","Construct a new `InputPort` for `input_device`",4],[10,"open","","Open the port returning an error if there is a problem",4],[10,"read","","Reads a single `MidiEvent` if one is avaible",4],[10,"poll","","`poll` tests if there is input available, either returing a bool or an error",4],[10,"close","","Closes the input, flushing any pending buffers",4],[10,"has_host_error","","",4],[10,"new","","Construct a new `InputPort` for `input_device`",5],[10,"open","","Open the port returning an error if there is a problem",5],[10,"abort","","Terminates outgoing messages immediately",5],[10,"close","","Closes the midi stream, flushing any pending buffers",5],[10,"write_event","","Write a single `MidiEvent`",5],[10,"write_message","","Write a single `MidiMessage` immediately",5],[10,"has_host_error","","",5]],"paths":[[1,"DeviceInfo"],[1,"MidiMessage"],[1,"MidiEvent"],[2,"PortMidiError"],[1,"InputPort"],[1,"OutputPort"]]};
initSearch(searchIndex);
