var searchIndex = {};
searchIndex['portmidi'] = {"items":[[0,"","portmidi",""],[3,"DeviceInfo","","Represents what we know about a device"],[12,"device_id","","The `PortMidiDeviceId` used with `OutputPort::new` and `InputPort::new`",0],[12,"name","","The name of the device",0],[12,"input","","Is the device an input",0],[12,"output","","Is the device an output",0],[3,"MidiMessage","","Represents a single midi message, see also `MidiEvent`"],[12,"status","","",1],[12,"data1","","",1],[12,"data2","","",1],[3,"MidiEvent","","Represents a time stamped midi event. See also `MidiMessage`"],[12,"message","","",2],[12,"timestamp","","",2],[3,"InputPort","","Representation of an input midi port"],[3,"OutputPort","","Representation of an output midi port"],[4,"PortMidiError","",""],[13,"HostError","","",3],[13,"InvalidDeviceId","","",3],[13,"InsufficientMemory","","",3],[13,"BufferTooSmall","","",3],[13,"BufferOverflow","","",3],[13,"BadPtr","","",3],[13,"BadData","","",3],[13,"InternalError","","",3],[13,"BufferMaxSize","","",3],[5,"initialize","","`initialize` initalizes the underlying PortMidi C library, call this\nbefore using the library."],[5,"terminate","","`terminate` terminates the underlying PortMidi C library, call this\nafter using the library."],[5,"count_devices","","Return the number of devices. This number will not change during the lifetime\nof the program."],[5,"get_default_input_device_id","","Gets the `PortMidiDeviceId` for the default input, or `None` if\nthere isn't one"],[5,"get_default_output_device_id","","Gets the `PortMidiDeviceId` for the default output, or `None` if\nthere isn't one"],[5,"get_device_info","","Returns a `DeviceInfo` with information about a device, or `None` if\nit does not exist"],[5,"get_error_text","","Translate portmidi error number into human readable message.\n*    These strings are constants (set at compile time) so client has\n*    no need to allocate storage"],[5,"get_host_error_text","","Translate portmidi host error into human readable message.\nThese strings are computed at run time, so client has to allocate storage.\nAfter this routine executes, the host error is cleared."],[6,"PortMidiDeviceId","","Used by PortMidi to refer to a Midi device"],[6,"PortMidiResult","",""],[17,"HDRLENGTH","",""],[17,"PM_HOST_ERROR_MSG_LEN","",""],[11,"eq","","",3],[11,"ne","","",3],[11,"fmt","","",3],[11,"fmt","","",3],[11,"fmt","","",0],[11,"clone","","",0],[11,"fmt","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"fmt","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"clone","","",2],[11,"new","","Construct a new `InputPort` for `input_device`",4],[11,"open","","Open the port returning an error if there is a problem",4],[11,"read","","Reads a single `MidiEvent` if one is avaible",4],[11,"poll","","`poll` tests if there is input available, either returing a bool or an error",4],[11,"close","","Closes the input, flushing any pending buffers",4],[11,"has_host_error","","",4],[11,"new","","Construct a new `InputPort` for `input_device`",5],[11,"open","","Open the port returning an error if there is a problem",5],[11,"abort","","Terminates outgoing messages immediately",5],[11,"close","","Closes the midi stream, flushing any pending buffers",5],[11,"write_event","","Write a single `MidiEvent`",5],[11,"write_message","","Write a single `MidiMessage` immediately",5],[11,"has_host_error","","",5]],"paths":[[3,"DeviceInfo"],[3,"MidiMessage"],[3,"MidiEvent"],[4,"PortMidiError"],[3,"InputPort"],[3,"OutputPort"]]};
initSearch(searchIndex);
